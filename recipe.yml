name: 'Automated Testing Kit - Demonstration Recipe'
description: 'Set up Automated Testing Kit for demonstration on a new Drupal installation.'
# The type key is similar to the package key in module.info.yml. It
# can be used by the UI to group Drupal recipes. Additionally,
# the type 'Site' means that the Drupal recipe will be listed in
# the installer.
type: 'Site'

# An array of recipes to apply prior to applying this recipe. If any of these
# recipes fail to apply, this recipe will not be applied either.
#
recipes:
  - core/recipes/image_media_type

install:
  # An array of modules or themes to install, if they are not already.
  # The system will detect if it is a theme or a module. During the
  # install only simple configuration from the new modules is created.
  # This allows the Drupal recipe control over the configuration.

  # Install core dependencies.
  - node
  - media

  # Install Automated Testing Kit, the demo support module and their dependencies.
  - automated_testing_kit
  - admin_toolbar
  - admin_toolbar_tools
  - pathauto
  - qa_accounts
  - redirect
  - token
  - webform
  - xmlsitemap

  # A Drupal recipe can have a config directory. All configuration
  # is this directory will be imported after the modules have been
  # installed.
  # Additionally, the Drupal recipe can install configuration entities
  # provided by the modules it configures. This allows them to not have
  # to maintain or copy this configuration.
  #
config:
  # If the config we're importing already exists, skip it.
  strict: false
  import:
    automated_testing_kit: "*"
    admin_toolbar: "*"
    admin_toolbar_tools: "*"
    media: "*"
    pathauto: "*"
    qa_accounts: "*"
    redirect: "*"
    token: "*"
    webform: "*"
    xmlsitemap: "*"
  actions:
    system.site:
      simpleConfigUpdate:
        langcode: en
        name: 'Automated Testing Kit Demonstration '
        mail: admin@example.com
        slogan: ''
        page:
          403: /403-error-page
          404: /404-error-page
          front: /node


  # Configuration actions may be defined. The structure here should be
  # configuration entity ID, action, and then action arguments. Below the user
  # role entity type with an ID of editor is being created if it does not exist
  # and then has permissions added. The permissions key will be mapped to the
  # \Drupal\user\Entity\Role::grantPermission() method.
  #
  #actions:

